---
import ThemeToggle from "./ThemeToggle.astro"

const NAV_ITEMS = [
    {
        title: 'Inicio',
        label: 'inicio',
        url: '#'
    },
    {
        title: 'Experiencia',
        label: 'experiencia',
        url: '#experience'
    },
    {
        title: 'Proyectos',
        label: 'proyectos',
        url: '#projects'
    },
    {
        title: 'Sobre Mí',
        label: 'sobre mí',
        url: '#about-me'
    }
]
---

<header class="flex justify-center items-center py-10 w-full xl:w-[1120px] mx-auto bg-transparent">  
    <nav class="flex flex-row gap-x-8 items-center font-bold">
    {
        NAV_ITEMS.map((navItem) => (
            <a class="hover:text-purple-500 transition" aria-label={navItem.label} href={navItem.url}>
                {navItem.title}
            </a>
        ))
    }
        <ThemeToggle />
    </nav>
</header>

<style>
    nav {
      animation: nav-shadown 1s linear both;
      animation-timeline: scroll();
      animation-range: 0 100px;
    }
  
    @keyframes nav-shadown {
      to {
        @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
      }
    }
</style>

<script>
    document.addEventListener("astro:page-load", () => {
      const sections = document.querySelectorAll("section")
      const navItems = document.querySelectorAll("header nav a")
  
      const callback = (entries: any[]) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            navItems.forEach((item) => {
              if (item.getAttribute("aria-label") == entry.target.id) {
                item.classList.add("text-yellow-500")
              } else {
                item.classList.remove("text-yellow-500")
              }
            })
          }
        })
      }
  
      const observer = new IntersectionObserver(callback, {
        root: null,
        rootMargin: "0px",
        threshold: 0.3,
      })
  
      sections.forEach((section) => {
        observer.observe(section)
      })
  
      // Cleanup function
      document.onvisibilitychange = () => {
        if (document.visibilityState === "hidden") {
          observer.disconnect()
        } else {
          sections.forEach((section) => {
            observer.observe(section)
          })
        }
      }
    })
  </script>
