---
// Declarar el tipo de variable de cada valor del componente "Experience"
export interface Props {
    title: string
    date: string
    description: string
    link?: string // La ? se pone para indicar que el link puede ser 'undefined' o no
}
// Obtener valores del componente "Experience" de Astro
const { title, date, description, link } = Astro.props
---

<div class="absolute w-3 h-3 bg-gray-600 rounded-full mt-1.5 -start-1.5 border border-gray-400 dark:border-gray-600 dark:bg-gray-400">
</div>
<time
  class="mb-1 text-sm font-normal leading-none text-pink-600 dark:text-pink-200"
  >{date}</time
>
<h3 class="text-lg font-semibold dark:text-yellow-300 text-orange-400 mt-3">
  {title}
</h3>
<!-- text-pretty (text-wrap: pretty): Si un párrafo es muy largo y se queda una palabra suelta añade otra palabra a esa 
línea para que no se quede sola -->
<p class="mb-5 mt-4 text-base font-normal dark:text-gray-300 text-black text-balance">
  {description}
</p>
{
    // Crear renderizado condicional en caso de que el bloque de experiencia tenga link
    link && (            
        <a
          href="{link}"
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:outline-none focus:ring-gray-100 focus:text-blue-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700"
          >Saber Más... {" "} <svg
            class="w-3 h-3 ms-2 rtl:rotate-180"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 14 10"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M1 5h12m0 0L9 1m4 4L9 9"></path>
          </svg></a>
    )
}